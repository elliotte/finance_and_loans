$(document).on('page:load ready', function(){

    uiSharedHelper.setAccordianHandlers(); 
    // set user cell input listeners
    $( ".user-input-amt" ).change(function() {
        cashFlowHelper.updateRowTotalWith( $(this) )
        cashFlowHelper.updateSummaryTableColumnTotal( $(this) )
        cashFlowHelper.updateSumofSummariesTable( $(this) )
    })
    // set revenue table input listeners    
    $('#save-rev-inc-vat').on('click', function() {
        cashFlowHelper.cacheRevenueWithVatData();
    });
    $('#save-rev-exc-vat').on('click', function() {
        cashFlowHelper.cacheRevenueNoVatData();
    });
    // set Cost of Sale table listeners
    $('#save-cos-inc-vat').on('click', function() {
        cashFlowHelper.cacheCostsOfSaleWithVatData();
    });
    $('#save-cos-exc-vat').on('click', function() {
        cashFlowHelper.cacheCostsOfSaleNoVatData();
    });
      
});

var cashFlowHelper = (function() {
      
      return {
        
        cacheRevenueNoVatData: function() {
              vatData = false
              tableIdSelector = "tbody#revenue-exc-vat tr"
              localStorageKey = "revenue-exc-vat"
              parseUserInputTable(tableIdSelector, localStorageKey, vatData)
        },
        cacheRevenueWithVatData: function() {
              vatData = true
              tableIdSelector = "tbody#revenue-inc-vat tr"
              localStorageKey = "revenue-inc-vat"
              parseUserInputTable(tableIdSelector, localStorageKey, vatData)
        },
        cacheCostsOfSaleWithVatData: function() {
              tableIdSelector = "tbody#cos-inc-vat tr"
              localStorageKey = "cos-inc-vat"
              parseUserInputTable(tableIdSelector, localStorageKey)
        },
        cacheCostsOfSaleNoVatData: function() {
              tableIdSelector = "tbody#cos-exc-vat tr"
              localStorageKey = "cos-exc-vat"
              parseUserInputTable(tableIdSelector, localStorageKey)
        },
        // END OF FUNCTION
        updateRowTotalWith: function(userInput) {
              
              miTag = userInput.parent().parent().find("input")[0].value
              
              if ( miTag == "" ) {
                  alert("Add Mi Tag first")
                  userInput.val("") 
              }
              else {

                inputCell = userInput
                // fetch row from DOM
                inputRow = inputCell.parent().parent();
                // find total cell
                inputRowTotalCell = inputRow.find('td:last')
                // fetch array of cells
                $rowOfCells = $(inputRow).find("td");
                
                rowData = []
                $rowOfCells.each(function(cellIndex) {
                  amountInput = $(this).find("input").val()
                  // check truthy evaluation to filter save button
                  rowData.push(amountInput)
                });
                // first cell is miTag and last is total column so slice
                cleansedData = rowData.slice(1, ( rowData.length - 1) )
                console.log(cleansedData)

                var sumTotal = cleansedData.reduce(function(a, b) {
                  return strToNumber(a) + strToNumber(b);
                });

                inputRowTotalCell[0].innerText = sumTotal;
                console.log(sumTotal)
              }
              
        },
        updateSummaryTableColumnTotal: function(userInput){
          
          var sum = 0;
          parentSection =  userInput.parent().parent().closest("section")
          totalSection = parentSection.next("section").find("table")

          var tables = parentSection.find("tbody") // find tbody from current cell
          inputCellIndex = userInput.parent().index() 
          var totalTableRows = totalSection.find("tr") 

          for ( j=0; j < ( tables.length ); j++ ) {   
            var tableRows = tables[j].rows
            var i;
            var howManyRows = tableRows.length
            for ( i=0; i < ( howManyRows - 1 ); i++) // skip first (hence i=1)
              {
                var thisTrElem = tableRows[i];
                var thisTdElem = thisTrElem.cells[inputCellIndex];      
                var thisNodeVal = thisTdElem.children[0].value               
                // try to convert text to numeric
                var thisNumber = parseFloat(thisNodeVal);
                // if you didn't get back the value NaN (i.e. not a number), add into result
                if ( !isNaN(thisNumber) )
                  {
                    sum += thisNumber;
                    totalColumnTd = totalTableRows[1].cells[inputCellIndex]
                    totalColumnTd.children[0].value = sum
                  }

              } // end for
              cashFlowHelper.updateRowTotalWith($(totalColumnTd.children[0]))
          } 
        },
        updateSumofSummariesTable: function(userInput){
          
          inputCellIndex = userInput.parent().index() 
          //cost_total = $("#cost_total").find("tr")[1]
          //total_out = $("#total_out")
          totalNetDiff = $("#bottom-net-diff-summary-table")
          //tdCost = cost_total.cells[inputCellIndex]

          // revenue section summary table
          revenueTotalTable = $("#cash-in-totals-summary-table").find("tr")[1]
          // bottom summary in table
          totalCashIn = $("#bottom-rev-summary-table")
          //update DOM Table
          updateView( revenueTotalTable, totalCashIn, inputCellIndex )
          //cos section summary table
          cosTotalTable = $("#cos-out-totals-summary-table").find("tr")[1]
          // bottom summary out table
          totalCashOut = $('#bottom-out-summary-table')
          //update DOM Table
          updateView( cosTotalTable, totalCashOut, inputCellIndex )
          
          //calc net DIFF
          inSum = totalCashIn.find("td")[inputCellIndex].children[0].value
          outSum = totalCashOut.find("td")[inputCellIndex].children[0].value
          netDifference = parseInt(inSum) + parseInt(outSum*-1)
          
          // update DOM and row total
          targetCell = totalNetDiff.find("td")[inputCellIndex].children[0]
          targetCell.value = netDifference
          
          cashFlowHelper.updateRowTotalWith($(targetCell))

        }
      };
})();
// helper to cache userInput Table
function parseUserInputTable(tableID, storageKey, vatData) {
        //console.log(vatData)
        financialControlError = false
        // cache cashflow date headers from DOM
        dateHeaders = $('.cf-date-selector')
        // extract date text for params, localstorage & checks 
        cashFlowDateRange = []
        $.each(dateHeaders, function(index, text) {
          var date = $(text).data('date')
          cashFlowDateRange.push(date)
        })
        // cache server side VIEW no of columns for client side checking consistency
        monthsPerCashFlowServerSide = $('#cf-control-selector').data('months')
        // check consistent
        if ( monthsPerCashFlowServerSide != cashFlowDateRange.length ) { 
            financialControlError = true
            console.log('error set')
        }
        // cache revenue with VAT table from DOM
        var cachedData = [];
        var $tableInputRows = $(tableID).each(function(index) {            
            profitBeesTag = $(this).data('pb-tag')
            transactionType = $(this).data('pb-type')

            $rowOfCells = $(this).find("td");
            //console.log($rowOfCells)
            rowData = {}
            rowData["monea_tag"]= profitBeesTag
            rowData["type"]= transactionType
            $rowOfCells.each(function(cellIndex) {
              amountInput = $(this).find("input").val()
              // check truthy evaluation to filter save button
                if ( cellIndex == 0 )
                {
                 rowData["mi_tag"] = amountInput 
                }
                else
                {
                  rowData[ cashFlowDateRange[ cellIndex - 1 ] ] = amountInput
                }
               
            });
            cachedData.push(rowData)    
        }); 
        // remove save button <tr> row
        cachedData.pop()
        // set data to localStorage for future usage
        setLocalStorage(storageKey, cachedData);
        // Convert to JSON (Note: jQuery will also do this for you on the Ajax request)
              // var myObj = {};
              // myObj.rows = cachedData;

        // PARAMS INCLUDE VAT TO BE CALCULATE FOR CONTROLLER           
        persistData = { "vat" : vatData, "transactions" : JSON.parse(localStorage.getItem(storageKey)) }

        $.ajax({          
          url: '/cash_flow_ledgers/'+ $("#cashflow_id").val() +'/add_transactions',
          data: persistData,
          method: 'POST',
          dataType: 'SCRIPT'
        })

}
// helper for update net summaries table
function updateView(dataTable, tableToUpdate, inputCellIndex ) {

      cellWithTotal = dataTable.cells[inputCellIndex]
      targetCell = tableToUpdate.find("td")[inputCellIndex].children[0]
      // update value
      targetCell.value = cellWithTotal.children[0].value
      // update total column
      cashFlowHelper.updateRowTotalWith($(targetCell))

}
//shitty helper
function strToNumber (value) {
     return parseInt(value) || 0;
}
// helper for setting CashFlow localStorage Data
function setLocalStorage(key, data) {
  localStorage[key] = JSON.stringify(data);
}
