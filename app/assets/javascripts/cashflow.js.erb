
$(document).on('page:load ready', function(){

    uiSharedHelper.setAccordianHandlers(); 
    // set user cell input listeners
    $( ".user-input-amt" ).change(function() {
        cashFlowHelper.updateRowTotalWith( $(this) )
    })
    // set revenue table input listeners
    $('#save-rev-inc-vat').on('click', function() {
        cashFlowHelper.cacheRevenueWithVatData();
    });
    $('#save-rev-exc-vat').on('click', function() {
        cashFlowHelper.cacheRevenueNoVatData();
    });
    // set Cost of Sale table listeners
    $('#save-cos-inc-vat').on('click', function() {
        cashFlowHelper.cacheCostsOfSaleWithVatData();
    });
    $('#save-cos-exc-vat').on('click', function() {
        cashFlowHelper.cacheCostsOfSaleNoVatData();
    });
      
});

var cashFlowHelper = (function() {
      
      return {
        
        cacheRevenueNoVatData: function() {
              tableIdSelector = "tbody#revenue-exc-vat tr"
              localStorageKey = "revenue-exc-vat"
              parseUserInputTable(tableIdSelector, localStorageKey)
        },
        cacheRevenueWithVatData: function() {
              tableIdSelector = "tbody#revenue-inc-vat tr"
              localStorageKey = "revenue-inc-vat"
              parseUserInputTable(tableIdSelector, localStorageKey)
        },
        cacheCostsOfSaleWithVatData: function() {
              tableIdSelector = "tbody#cos-inc-vat tr"
              localStorageKey = "cos-inc-vat"
              parseUserInputTable(tableIdSelector, localStorageKey)
        },
        cacheCostsOfSaleNoVatData: function() {
              tableIdSelector = "tbody#cos-exc-vat tr"
              localStorageKey = "cos-exc-vat"
              parseUserInputTable(tableIdSelector, localStorageKey)
        },
        // END OF FUNCTION
        updateRowTotalWith: function(userInput) {
              
              inputCell = userInput
              // fetch row from DOM
              inputRow = inputCell.parent().parent();
              // find total cell
              inputRowTotalCell = inputRow.find('td:last')
              // fetch array of cells
              $rowOfCells = $(inputRow).find("td");
              
              rowData = []
              $rowOfCells.each(function(cellIndex) {
                amountInput = $(this).find("input").val()
                // check truthy evaluation to filter save button
                rowData.push(amountInput)
              });
              // first cell is miTag and last is total column so slice
              cleansedData = rowData.slice(1, ( rowData.length - 1) )
              console.log(cleansedData)

              var sumTotal = cleansedData.reduce(function(a, b) {
                return strToNumber(a) + strToNumber(b);
              });

              inputRowTotalCell[0].innerText = sumTotal;
              console.log(sumTotal)
              
        },
      };
      // END OF RETURN
})();

// helper for setting CashFlow localStorage Data
function setLocalStorage(key, data) {
  localStorage[key] = JSON.stringify(data);
}
// helper to cache userInput Table
function parseUserInputTable(tableID, storageKey) {

        financialControlError = false
        // cache cashflow date headers from DOM
        dateHeaders = $('.cf-date-selector')
        // extract date text for params, localstorage & checks 
        cashFlowDateRange = []
        $.each(dateHeaders, function(index, text) {
          var date = $(text).data('date')
          cashFlowDateRange.push(date)
        })
        // cache server side VIEW no of columns for client side checking consistency
        monthsPerCashFlowServerSide = $('#cf-control-selector').data('months')
        // check consistent
        if ( monthsPerCashFlowServerSide != cashFlowDateRange.length ) { 
            financialControlError = true
            console.log('error set')
        }
        // cache revenue with VAT table from DOM
        var cachedData = [];
        var $revenuInputRows = $(tableID).each(function(index) {            
            profitBeesTag = $(this).data('pb-tag')
            transactionType = $(this).data('pb-type')

            $rowOfCells = $(this).find("td");
            //console.log($rowOfCells)
            rowData = {}
            rowData["monea_tag"]= profitBeesTag
            rowData["type"]= transactionType
            $rowOfCells.each(function(cellIndex) {
              amountInput = $(this).find("input").val()
              // check truthy evaluation to filter save button
                if(cellIndex==0)
                {
                 rowData["mi_tag"] = amountInput 
                }
                else
                {
                  rowData[cashFlowDateRange[cellIndex-1]]=amountInput
                }
               
            });
            // remove total <td> column
            
            //rowData[index].pop()
            cachedData.push(rowData)    
        }); 
        // remove save button <tr> row
        cachedData.pop()
        console.log(cachedData)
        // set data to localStorage for future usage
        setLocalStorage(storageKey, cachedData);
        // Convert to JSON (Note: jQuery will also do this for you on the Ajax request)
              // var myObj = {};
              // myObj.rows = cachedData;      
        $.ajax({          
          url: '/cash_flow_ledgers/'+ $("#cashflow_id").val() +'/add_transactions',
          data: {"transactions" : JSON.parse(localStorage.getItem(storageKey))},
          method: 'POST',
          dataType: 'JSON'
        })

}

function strToNumber (value) {
     return parseInt(value) || 0;
}

